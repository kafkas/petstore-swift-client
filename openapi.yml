openapi: 3.0.4
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: https://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.27-SNAPSHOT
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: https://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: https://swagger.io
  - name: user
    description: Operations about user
  - name: veterinary
    description: Veterinary and medical records for pets
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet.
      description: Update an existing pet by Id.
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "422":
          description: Validation exception
        default:
          description: Unexpected error
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store.
      description: Add a new pet to the store.
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        default:
          description: Unexpected error
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status.
      description: Multiple status values can be provided with comma separated strings.
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid status value
        default:
          description: Unexpected error
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags.
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid tag value
        default:
          description: Unexpected error
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID.
      description: Returns a single pet.
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        default:
          description: Unexpected error
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data.
      description: Updates a pet resource based on the form data.
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid input
        default:
          description: Unexpected error
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet.
      description: Delete a pet.
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Pet deleted
        "400":
          description: Invalid pet value
        default:
          description: Unexpected error
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: Uploads an image.
      description: Upload image of the pet.
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: No file uploaded
        "404":
          description: Pet not found
        default:
          description: Unexpected error
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status.
      description: Returns a map of status codes to quantities.
      operationId: getInventory
      x-swagger-router-controller: OrderController
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        default:
          description: Unexpected error
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet.
      description: Place a new order in the store.
      x-swagger-router-controller: OrderController
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/xml:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        default:
          description: Unexpected error
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID.
      x-swagger-router-controller: OrderController
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
        default:
          description: Unexpected error
    delete:
      tags:
        - store
      summary: Delete purchase order by identifier.
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
      x-swagger-router-controller: OrderController
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: order deleted
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
        default:
          description: Unexpected error
  /user:
    post:
      tags:
        - user
      summary: Create user.
      description: This can only be done by the logged in user.
      x-swagger-router-controller: UserController
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array.
      description: Creates list of users with given input array.
      x-swagger-router-controller: UserController
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system.
      description: Log into the system.
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
        default:
          description: Unexpected error
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session.
      description: Log user out of the system.
      operationId: logoutUser
      parameters: []
      responses:
        "200":
          description: successful operation
        default:
          description: Unexpected error
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name.
      description: Get user detail based on username.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
        default:
          description: Unexpected error
    put:
      tags:
        - user
      summary: Update user resource.
      description: This can only be done by the logged in user.
      x-swagger-router-controller: UserController
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: successful operation
        "400":
          description: bad request
        "404":
          description: user not found
        default:
          description: Unexpected error
    delete:
      tags:
        - user
      summary: Delete user resource.
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
        default:
          description: Unexpected error

  # The following endpoints are custom additions for testing with more complex models and are not part of the original spec.
  /veterinary/medical-records:
    post:
      tags:
        - veterinary
      summary: Create a medical record for a pet
      description: Create a new medical record entry for a pet
      operationId: createMedicalRecord
      requestBody:
        description: Medical record to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MedicalRecord"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicalRecord"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        default:
          description: Unexpected error
      security:
        - api_key: []
  /veterinary/medical-records/{petId}:
    get:
      tags:
        - veterinary
      summary: Get medical records for a pet
      description: Retrieve all medical records for a specific pet
      operationId: getMedicalRecordsByPetId
      parameters:
        - name: petId
          in: path
          description: ID of pet to get medical records for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MedicalRecord"
        "400":
          description: Invalid pet ID
        "404":
          description: Pet not found
        default:
          description: Unexpected error
      security:
        - api_key: []
  /veterinary/medical-records/{recordId}:
    put:
      tags:
        - veterinary
      summary: Update a medical record
      description: Update an existing medical record
      operationId: updateMedicalRecord
      parameters:
        - name: recordId
          in: path
          description: ID of medical record to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated medical record
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MedicalRecord"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicalRecord"
        "400":
          description: Invalid input
        "404":
          description: Medical record not found
        "422":
          description: Validation exception
        default:
          description: Unexpected error
      security:
        - api_key: []
  /veterinary/veterinarians:
    post:
      tags:
        - veterinary
      summary: Create veterinarian information
      description: Create a new veterinarian profile
      operationId: createVeterinarianInfo
      requestBody:
        description: Veterinarian information to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VeterinarianInfo"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VeterinarianInfo"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        default:
          description: Unexpected error
      security:
        - api_key: []
  /veterinary/veterinarians/{vetId}:
    get:
      tags:
        - veterinary
      summary: Get veterinarian information
      description: Retrieve information about a specific veterinarian
      operationId: getVeterinarianById
      parameters:
        - name: vetId
          in: path
          description: ID of veterinarian to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VeterinarianInfo"
        "400":
          description: Invalid veterinarian ID
        "404":
          description: Veterinarian not found
        default:
          description: Unexpected error
      security:
        - api_key: []
  /veterinary/appointments:
    post:
      tags:
        - veterinary
      summary: Schedule an appointment
      description: Schedule a new veterinary appointment
      operationId: scheduleAppointment
      requestBody:
        description: Appointment details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Appointment"
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "400":
          description: Invalid input
        "422":
          description: Validation exception
        default:
          description: Unexpected error
      security:
        - api_key: []
  /veterinary/appointments/{appointmentId}:
    get:
      tags:
        - veterinary
      summary: Get appointment details
      description: Retrieve details of a specific appointment
      operationId: getAppointmentById
      parameters:
        - name: appointmentId
          in: path
          description: ID of appointment to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "400":
          description: Invalid appointment ID
        "404":
          description: Appointment not found
        default:
          description: Unexpected error
      security:
        - api_key: []
components:
  schemas:
    Order:
      x-swagger-router-model: io.swagger.petstore.model.Order
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Category:
      x-swagger-router-model: io.swagger.petstore.model.Category
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      x-swagger-router-model: io.swagger.petstore.model.User
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      x-swagger-router-model: io.swagger.petstore.model.Tag
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      x-swagger-router-model: io.swagger.petstore.model.Pet
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
    # The following types are custom additions for testing with more complex models and are not part of the original spec.
    MedicalRecord:
      oneOf:
        - $ref: "#/components/schemas/VaccinationRecord"
        - $ref: "#/components/schemas/CheckupRecord"
        - $ref: "#/components/schemas/SurgeryRecord"
    VaccinationRecord:
      type: object
      required:
        - record_type
        - pet_id
        - veterinarian_id
        - created_at
        - vaccine_name
        - vaccination_date
        - next_due_date
      properties:
        record_type:
          type: string
          enum:
            - vaccination
        id:
          type: integer
          format: int64
          example: 1001
        pet_id:
          type: integer
          format: int64
          example: 10
        veterinarian_id:
          type: integer
          format: int64
          example: 501
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        urgency_level:
          $ref: "#/components/schemas/UrgencyLevel"
        notes:
          type: string
          example: "Pet responded well to treatment"
        vaccine_name:
          type: string
          example: "Rabies"
        vaccination_date:
          type: string
          format: date
          example: "2024-01-15"
        next_due_date:
          type: string
          format: date
          example: "2025-01-15"
        vaccination_site:
          type: string
          example: "Left shoulder"
    CheckupRecord:
      type: object
      required:
        - record_type
        - pet_id
        - veterinarian_id
        - created_at
        - follow_up_required
      properties:
        record_type:
          type: string
          enum:
            - checkup
        id:
          type: integer
          format: int64
          example: 1001
        pet_id:
          type: integer
          format: int64
          example: 10
        veterinarian_id:
          type: integer
          format: int64
          example: 501
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        urgency_level:
          $ref: "#/components/schemas/UrgencyLevel"
        notes:
          type: string
          example: "Pet responded well to treatment"
        weight_kg:
          type: number
          format: float
          example: 25.5
        temperature_celsius:
          type: number
          format: float
          example: 38.5
        heart_rate_bpm:
          type: integer
          example: 120
        follow_up_required:
          type: boolean
          example: false
        examination_findings:
          type: string
          example: "Healthy, good body condition"
        primary_test_result:
          $ref: "#/components/schemas/TestResult"
    SurgeryRecord:
      type: object
      required:
        - record_type
        - pet_id
        - veterinarian_id
        - created_at
        - procedure_name
        - surgery_date
      properties:
        record_type:
          type: string
          enum:
            - surgery
        id:
          type: integer
          format: int64
          example: 1001
        pet_id:
          type: integer
          format: int64
          example: 10
        veterinarian_id:
          type: integer
          format: int64
          example: 501
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        urgency_level:
          $ref: "#/components/schemas/UrgencyLevel"
        notes:
          type: string
          example: "Pet responded well to treatment"
        procedure_name:
          type: string
          example: "Spay surgery"
        surgery_date:
          type: string
          format: date-time
          example: "2024-01-15T09:00:00Z"
        anesthesia_used:
          type: string
          example: "Isoflurane"
        surgery_duration_minutes:
          type: integer
          example: 45
        recovery_notes:
          type: string
          example: "Patient recovered well, eating normally"
        post_op_medications:
          type: array
          items:
            type: string
          example: ["Pain medication", "Antibiotics"]
    Medication:
      type: object
      required:
        - medication_name
        - dosage
        - frequency
      properties:
        medication_name:
          type: string
          example: "Amoxicillin"
        dosage:
          type: string
          example: "250mg"
        frequency:
          type: string
          example: "Twice daily"
        administration_method:
          type: string
          example: "Oral"
        special_instructions:
          type: string
          example: "Give with food"
    VeterinarianInfo:
      type: object
      required:
        - id
        - first_name
        - last_name
        - license_number
      properties:
        id:
          type: integer
          format: int64
          example: 501
        first_name:
          type: string
          example: "Dr. Sarah"
        last_name:
          type: string
          example: "Johnson"
        license_number:
          type: string
          example: "VET-2024-001"
        specialization:
          type: string
          example: "Small Animal Medicine"
        years_experience:
          type: integer
          example: 15
        clinic_name:
          type: string
          example: "Happy Paws Veterinary Clinic"
        contact_method:
          $ref: "#/components/schemas/ContactMethod"
        phone_number:
          type: string
          example: "+1-555-123-4567"
        email_address:
          type: string
          format: email
          example: "dr.johnson@happypaws.com"
        emergency_contact_available:
          type: boolean
          example: true
      additionalProperties:
        type: string
    Appointment:
      type: object
      required:
        - pet_id
        - veterinarian_id
        - appointment_date
        - appointment_status
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        pet_id:
          type: integer
          format: int64
          example: 10
        veterinarian_id:
          type: integer
          format: int64
          example: 501
        appointment_date:
          type: string
          format: date-time
          example: "2024-02-15T14:30:00Z"
        appointment_status:
          $ref: "#/components/schemas/AppointmentStatus"
        urgency_level:
          $ref: "#/components/schemas/UrgencyLevel"
        reason_for_visit:
          type: string
          example: "Annual checkup"
        estimated_duration_minutes:
          type: integer
          example: 30
        special_instructions:
          type: string
          example: "Pet is nervous around other animals"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
    ContactMethod:
      type: string
      enum:
        - phone
        - email
        - both
      example: "both"
    AppointmentStatus:
      type: string
      enum:
        - scheduled
        - confirmed
        - in_progress
        - completed
        - cancelled
        - no_show
      example: "scheduled"
    UrgencyLevel:
      type: integer
      enum:
        - 1
        - 2
        - 3
      example: 1
    TestResult:
      oneOf:
        - type: string
          example: "A positive"
        - type: number
          example: 95.5
        - type: boolean
          example: true


  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
